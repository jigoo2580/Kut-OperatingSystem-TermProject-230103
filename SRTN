import process

#SRTN
def srtn(process_list = []) :
    result = [] #결과
    process_list.sort(key = lambda process:process.lb_time) #LBT를 기준으로 정렬, (LBT -Left Burst Time) 
    #중복되는 남은 BT를 가진 프로세스를 찾아 정렬, AT(도착 시간) 기준.
    for i in range(len(process_list)-1) : 
      #만약 남은 BT가 같고 i가 i+1 보다 AT가 클때(더 늦게 도착했을 때) 서로 위치를 바꾼다. - 먼저 온 순.
      if process_list[i].lb_time == process_list[i+1].lb_time and processList[i].a_time > processList[i+1].a_time : 
        temp = process_list[i]
        process_list[i] = process_list[i+1]
        process_list[i+1] = temp
    result = process_list
    return result #결과를 반환


#테스트
if __name__ == '__main__' :
    test_process_list = []

    for i in range(5) : 
      name = f'test{i}'
      process.proc_add(name = f'test{i}', arr_time = 1 + 2*i, bst_time = 7 - i)
      test_process_list.append(eval(f'process.test{i}'))
      test_process_list[i].see_in_val()

    print('----------------------------------')
    srtn(test_process_list)
    for i in range(5):
      test_process_list[i].see_in_val()
